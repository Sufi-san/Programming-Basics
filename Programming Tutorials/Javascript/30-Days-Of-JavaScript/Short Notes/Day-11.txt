Destructuring:
It is a way to unpack arrays & objects and assigning elements to distinct variables.

Destructuring Arrays:
arr = [1, 2, 3, 4, 5];
- Assigning: let [a, b] = arr // a = 1, b = 2
- Extra variables: let [a, b, c, d, e, f] = arr // a = - 1 ... e = 5, f = undefined
- Skipping values: let [a, , b, c, , e] = arr // a = 1, b = 3, c = 4, e = undefined
- Default values: let[a, b, c, d, e, f = 6] = arr // a = 1, ..., e = 5, f = 6;
- Using spread operator to get an array of remaining variables: let [a, b, c, ...rest] = arr // a = 1, b = 2, c = 3, rest = [4, 5];
- During iteration (like while iterating maps): for(const [first, second] of arr) {code}

Destructuring Object:
When we destructure objects, the name of the variable we use to destructure should be exactly the same as the key or property of the object. 
const rectangle = {
  width: 20,
  height: 10,
  area: 200
}
let { width, height, area, perimeter } = rectangle // width = 20, height = 10, area = 200, perimeter = undefined
- Renaming during structuring:
let {width: w, height: h, area: a, perimeter: p} = rectangle // w = 20, h = 10, a = 200, p = undefined
- Default values: works similar to array default values
- Objects can be destructured in a similar way in function parameters section.
- Similarly they can also be destructured during iteration.
- Difference: Object keys cannot be skipped while destructuring. However, as we match the property/key names while destructuring, only the required properties are destructured and the order of selection does not matter.

Spread Operators:
- Can be used to copy the array as a whole instead of using slice, map, filter, reduce or iteration:
const evens = [0, 2, 4, 8];
const evenNums = [...evens]; // evenNums = [0, 2, 4, 8]
const odds = [1, 3, 5, 7];
const wholeNums = [...evens, ...odds] // wholeNums = [0, 2, 4, 8, 1, 3, 5, 7]
- Can also be used to copy objects
const user = {
  name:'Asabeneh',
  title:'Programmer',
  country:'Finland',
  city:'Helsinki'
}
const copiedUser = {...user}
// copiedUser = {name: "Asabeneh", title: "Programmer", country: "Finland", city: "Helsinki"}
- While copying, object values can be changed:
const copiedUser = {...user, title:'instructor'}
// copiedUser = {name: "Asabeneh", title: "instructor", country: "Finland", city: "Helsinki"}
- As studied earlier, it can also be used to take variable number of arguments in both standard and arrow functions (rest parameters).

Scenarios to Consider:

    Primitive Values:

    If the original values within the object or array are primitive data types (like numbers, strings, booleans), modifying the destructured variables won't affect the original values. This is because primitive values are immutable (unchangeable) in JavaScript. Any changes create new primitive values in memory.

    Nested Objects/Arrays:

    If the original data structure contains nested objects or arrays, changes made through destructuring can affect the nested structures as well, since you're modifying the references.
