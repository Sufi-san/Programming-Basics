Local storage is useful for storing data that the user will need to access later, such as offline data, because it stores the data in the browser and the system. This data will persist even if the user closes and reopens the browser and is accessible by other sites.

Session storage is a great way to improve the performance of your web applications. It stores data locally on the browser but is specific to (and only accessible by) the respective site/browser tab and is only available while the user is on the site/tab. This is a more secure storage method due to the restrictive access and promotes better site performance due to reduced data transfer between server and client.

Cookies are a good choice for storing data that should not be persisted for a long time, such as session IDs. Cookies allow you to set an expiry time at which point it would be deleted. Cookies can only be smaller sized data compared to the other two storage methods.

Cookies, localStorage, and sessionStorage are all:

    Storage mechanisms on the client side. This means the clients can read and modify the values.
    Key-value based storage.
    They are only able to store values as strings. Objects will have to be serialized into a string (JSON.stringify()) in order to be stored.


HTML 5 Web Storage:
Web Storage(sessionStorage and localStorage) is a new HTML5 API offering important benefits over traditional cookies. Before HTML5, application data had to be stored in cookies, included in every server request. Web storage is more secure, and large amounts of data can be stored locally, without affecting website performance.

The data being stored can be accessed using JavaScript, which gives you the ability to leverage client-side scripting to do many things that have traditionally involved server-side programming and relational databases. 

It should be noted that data stored in either localStorage or sessionStorage is specific to the protocol of the page.

Since sessionStorage and localStorage have similar methods, we will focus only on localStorage.


localStorage:
localStorage is kept even between browser sessions. This means data is still available when the browser is closed and reopened, and also instantly between tabs and windows.

Web Storage data is, in both cases, not available between different browsers. For example, storage objects created in Firefox cannot be accessed in Internet Explorer, exactly like cookies. There are five methods to work on local storage: setItem(), getItem(), removeItem(), clear(), key()

Some use cases of Web Storages are

    - store data temporarily
    - saving products that the user places in his shopping cart
    - data can be made available between page requests, multiple browser tabs, and also between browser sessions using localStorage
    - can be used offline completely using localStorage
    - Web Storage can be a great performance win when some static data is stored on the client to minimize the number of subsequent requests. Even images can be stored in strings using Base64 encoding.
    - can be used for user authentication method

For the examples mentioned above, it makes sense to use localStorage. You may be wondering, then, when we should use sessionStorage.

In cases, we want to to get rid of the data as soon as the window is closed. Or, perhaps, if we do not want the application to interfere with the same application thatâ€™s open in another window. These scenarios are served best with sessionStorage.

We can access local and session storage using 'window.localStorage' or 'window.sessionStorage' in the browser console. Since, window is a global built-in object, we can simply use 'localStorage' and 'sessionStorage' as well.

    localStorage - to display the localStorage object
    localStorage.clear() - to remove everything in the local storage
    localStorage.setItem(key, value) - to store data in the localStorage. It takes a key and a value parameters.
    localStorage.getItem(key) - to display data stored in the localStorage. It takes a key as a parameter.
    localStorage.removeItem(key) - to remove stored item form a localStorage. It takes key as a parameter.
    localStorage.key(index) - to display a data stored in a localStorage. It takes index as a parameter. 

Important points:
- when storing objects, we should 'stringify' them first if we want to preserve their format eg: Arrays & Custom Objects
