/**
 * You can edit, run, and share this code.
 * play.kotlinlang.org
 */
fun main() {
   /* var x: Int = 5 // var is mutable
    val y: Int = 10 // val is immutalbe
    // '': Int' can be removed as Kotlin automatically assigns suitable type to variable based on data
    println("Hello, World!")
    print("$x")
    x = 6
    // y = 7 will give error
    print("\n First Variable:$x, Second Variable: $y") */
    
    /* // For making null type variable we need '?'
    var myName: String? = null
    
    if(myName != null){
        print("$myName")
    } */
    
 /* // If-else and Switch Case(when)
 val value:Int = if(true) {
     print("Inside true")
     78 // 'value' will be assigned 78 i.e 78 returned
 }else{
         98 // 'value' will be assigned 98 i.e 98 returned
     }
    println(value) 
    
    val name = "Raihan"
    val x = when(name){ // when is a switch case, it can be standalone or can return to a variable
        "Sufiyan" -> {
            println("Hello $name")
        }
        "Faizan" -> {
            println("Hello Brother $name")
        }
        "Raihan" -> {
            println("Hello Anime Man")
        }
        else ->{
            println("You are someone we have prepared nothing for.")
        }
    }
    print(x) */
    
    /* //Arrays
    val numbers = arrayOf(1,2,3,7,10,9)
    for(i in numbers){ //for loop in Kotlin
        println("$i")
    }
    val names = arrayOf("Sufiyan","Faizan","Raihan")
    for(name in names){
        println(name)
    }
    numbers.forEach{ //Another type of for loop.
        print(it)
    } */
    
    //Ranges
    
    /*//List(Collection Framework)
      //Lists are immutable, to make mutable list we use 'mutableListOf()' */
      
    /*//Functions
    // Declare functions Outside fun main()
    println(add(2,7))
    greetings(name = "Sufiyan", greet = "Good Morning") // no matter the sequence correct arguments are passed*/
    
    //Functional Programming(Higher-Order Functions)
    /* //Higher-Order Functions: Take functions as an input and can also return functions.
    val output = operation(9,8,{ a,b -> 
    	print("Adding square of first number with second number we get: ")
        var a = a*a // since val cannot be reassigned
    	a + b // no return statement required 
    })
    
    print(output)*/
    
    /*//Classes
        val p1 = Person("Sufiyan")
        print(p1.name)*/
    
    
    /*//Special Classes*/
    
    /*//Scope Function*/
   
}
	class Person(val name: String)
	fun operation(a:Int,b:Int,operate: (Int,Int) -> Int):Int{
        return operate(a,b)
    }
    fun greetings(greet:String = "<Enter a greeting>",name:String = "<Insert Name>" ){ // Default value returns when no argument is passed
        print("Hello $name & A Very $greet")
    }
    fun add(a:Int ,b:Int): Int = a + b // Single line function